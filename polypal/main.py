import argparse
import subprocess
import os 

from .make_pdb import make_pdb
from .make_ff import make_ff
from .make_top import make_top
from .make_gromacs import make_gromacs

def run_polypal_pdb(help_flag=False, mode_flag_xyz=False, mode_flag_gromacs=False, xyz_filename=None, qforce_itp=None, pdb_filename=None):
    command = []
    
    if help_flag:
        pdb_custom_help()
    else:
        if mode_flag_xyz:
            command.extend(['-xyz'])
        if mode_flag_gromacs:
            command.extend(['-gromacs'])
        if xyz_filename:
            command.extend(['-x', xyz_filename])
        if qforce_itp:
            command.extend(['-q', qforce_itp])
        if pdb_filename:
            command.extend(['-p', pdb_filename])    

        make_pdb(command)
        
def run_polypal_ff(help_flag=False, itp_filename=None, ext_lj_file=None, nonbonded_itp=None):
    command = []
    
    if help_flag:
        ff_custom_help()
    else:
        if itp_filename:
            command.extend(['-q', itp_filename])
        if ext_lj_file:
            command.extend(['-lj', ext_lj_file])
        if nonbonded_itp:
            command.extend(['-n', nonbonded_itp])

        make_ff(command)

def run_polypal_top(help_flag=False, pdb_filename=None, itp_filename=None, assignment_file=None):
    command = []
        
    if help_flag:
        top_custom_help()
    else:
        if pdb_filename:
            command.extend(['-p', pdb_filename])
        if itp_filename:
            command.extend(['-q', itp_filename])
        if assignment_file:
            command.extend(['-a', assignment_file])

        make_top(command)

def run_polypal_gmx(help_flag=False, pdb_filename = None, qforce_itp = None, itp_filename = None, gro_filename = None, top_filename = None, mode_flag_txt=None, mode_flag_pqr=None, mode_flag_mol2=None, mode_flag_cif=None, charge_dir=None, assignment_file=None):
    command = []
        
    if help_flag:
        gmx_custom_help()
    else:
        if pdb_filename:
            command.extend(['-p', pdb_filename])
        if qforce_itp:
            command.extend(['-q', qforce_itp])
        if itp_filename:
            command.extend(['-f', itp_filename])
        if gro_filename:
            command.extend(['-g', gro_filename])
        if top_filename:
            command.extend(['-t', top_filename])
        if mode_flag_txt:
            command.extend(['-txt'])
        if mode_flag_pqr:
            command.extend(['-pqr'])
        if mode_flag_mol2:
            command.extend(['-mol2'])
        if mode_flag_cif:
            command.extend(['-cif'])
        if charge_dir:
            command.extend(['-c', charge_dir])
        if assignment_file:
            command.extend(['-a', assignment_file])

        make_gromacs(command)

def program_header():
    print()
    print("-" * 70)
    print("""
    @@@@   @@@  @    @   @  @@@@    @@@@@  @
    @   @ @   @ @     @ @   @   @  @     @ @
    @@@@  @   @ @      @    @@@@   @@@@@@@ @
    @     @   @ @      @    @      @     @ @
    @      @@@  @@@@@  @    @      @     @ @@@@@
    """)
    print("Version 1.0.0")
    print("Molly C. Warndorf, Timothy M. Swager, Alfredo Alexander-Katz")
    print("Massachusetts Institute of Technology â€“ 2024")
    print("-" * 70)
    print()

def pdb_custom_help():
    print("Usage of polypal pdb:")
    print()
    print("SYNOPSIS:")
    print("Create a PDB file that contains names from Q-Force .itp file or convert pdb files from Assemble! to GROMACS")
    print()
    print("USAGE:")
    print("To convert xyz from Q-Force output to pdb:")
    print("polypal_pdb -xyz -x optimized.xyz -q qforce.itp")
    print()
#    print("To convert Assemble! pdb file to pdb file for ACCII or GROMACS:")
#    print("polypal pdb -gromacs -p assemble_input.pdb")
#    print()
    print("OPTIONS:")
    print("-xyz or -gromacs     Mode for file conversion")
    print("-x                   xyz file from Q-Force output of optimized structure")
    print("-q                   .itp file generated from Q-Force")
#    print("-p                   PDB file generated by Assemble!")
    print() 

def ff_custom_help():
    print("Usage of polypal ff:")
    print()
    print("SYNOPSIS:")
    print("Create FF file for Assemble! from Q-Force")
    print()
    print("USAGE:")
    print("polypal ff -q qforce.itp [-lj path_to/ext_lj] [-n path_to/opls_ffnonbonded.itp]")
    print()
    print("OPTIONS:")
    print("-q     .itp file generated from Q-Force")
    print("-lj    Path to ext_lj file if used for Q-Force and if not in current directory")
    print("[-n]     Path to OPLS nonbonded atom types (optional if not using file supplied by PolyPal)")
    print()

def top_custom_help():
    print("Usage of polypal top:")
    print()
    print("SYNOPSIS:")
    print("Create topology files for Assemble!")
    print()
    print("USAGE:")
    print("polypal top -p input.pdb -q qforce.itp [-a assignment.txt]")
    print()
    print("OPTIONS:")
    print("-p     PDB file of monomer unit")
    print("-q     .itp file generated from Q-Force")
    print("[-a]   Path to assignment (generated from polypal_ff) file if not in current directory")
    print()

def gmx_custom_help():
    print("Usage of polypal gmx:")
    print()
    print("SYNOPSIS:")
    print("Convert PDB files from Assemble! to use for ACCII and Gromacs.")
    print("Add charges to .itp files and and fix .itp files for immediate use in GROMACS")
    print()
    print("USAGE:")
    print("To convert pdb files from Assemble! for ACCII or GROMACS:")
    print("polypal gmx -p input.pdb")
    print()
    print("To add charges from ACCII calculation (requires directory from ACCII with charge files in it)")
    print("polypal gmx [-flag] -c path/to/charge_directory -f assembmle.itp")   
    print()
    print("To cleanup GRO file from Assemble! for use in GROMACS)")
    print("polypal gmx -g assemble.gro")   
    print()
    print("OPTIONS:")
    print(" -p      PDB file name from Assemble! output (filename.pdb)")
    print(" -f      .itp filename from Assemble! output (filename.itp)")
    print(" -g      .gro filename from Assemble! output (filename.gro)")
    print("[-flag]  Flag to select charges from, options -txt, -pqr, -mol2, -cif (Default: -txt)")
    print(" -c      Directory of charge files computed from ASCII ")
    print()
    print("Charges for PDB files can be calculated with:")
    print("https://acc2.ncbr.muni.cz/")
    print()

def custom_help():
    print("PolyPal has four options to help Q-Force, Assemble!, and GROMACS to communicate with one another.")
    print("For a tutorial on how to use PolyPal, please visit: https://github.com/warndorf/polypal")
    print()
    print("PDB:")
    print("polypal pdb -h")
    print()
    print("FF:")
    print("polypal ff -h")
    print()
    print("TOP:")
    print("polypal top -h")
    print()
    print("GMX:")
    print("polypal gmx -h")
    print()

def main():
    
    parser = argparse.ArgumentParser(description=program_header(), add_help=False)

    parser.add_argument('-h', '--help', action='store_true')

    subparsers = parser.add_subparsers(dest='command')

    pdb_parser = subparsers.add_parser('pdb', add_help=False)
    pdb_parser.add_argument('-h', action='store_true')
    pdb_parser.add_argument('-xyz',action='store_true')
    pdb_parser.add_argument('-gromacs',action='store_true')
    pdb_parser.add_argument('-x', help='xyz file from Q-Force output of optimized structure')
    pdb_parser.add_argument('-q', help='.itp file generated from Q-Force')
    pdb_parser.add_argument('-p', help='PDB file generated by Assemble!')

    ff_parser = subparsers.add_parser('ff', help='Runs polypal ff', add_help=False)
    ff_parser.add_argument('-h', action='store_true', help='Pass the -h flag to make_ff_official.py for custom help')
    ff_parser.add_argument('-q', help='.itp file generated from Q-Force')
    ff_parser.add_argument('-lj', help='Path to ext_lj file if used for Q-Force and if not in same directory as qforce.itp')
    ff_parser.add_argument('-n', help='Path to OPLS nonbonded atom types (optional if not using file supplied by PolyPal)')

    top_parser = subparsers.add_parser('top', help='Runs polypal top', add_help=False)
    top_parser.add_argument('-h', action='store_true', help='Custom help flag for polypal top')
    top_parser.add_argument('-p', help='PDB file of monomer unit')
    top_parser.add_argument('-q', help='.itp file generated from Q-Force')
    top_parser.add_argument('-a', help='Path to assignment file (generated from polypal_ff)')

    gmx_parser = subparsers.add_parser('gmx', help='Runs polypal gmx', add_help=False)
    gmx_parser.add_argument('-h', action='store_true', help='Pass the -h flag to make_ff_official.py for custom help')
    gmx_parser.add_argument('-p', help='PDB file name from Assemble! output (filename.pdb)')
    gmx_parser.add_argument('-q', help='Q-Force .itp filename')
    gmx_parser.add_argument('-f', help='.itp filename from Assemble! output (filename.itp)')
    gmx_parser.add_argument('-g', help='.gro filename from Assemble! output (filename.gro)')
    gmx_parser.add_argument('-t', help='Flag to select charges from, options -txt, -pqr, -mol2, -cif (Default: -txt)')
    gmx_parser.add_argument('-txt', action='store_true', help='Directory of charge files computed from ASCII')
    gmx_parser.add_argument('-pqr', action='store_true', help='Directory of charge files computed from ASCII')
    gmx_parser.add_argument('-mol2', action='store_true', help='Directory of charge files computed from ASCII')
    gmx_parser.add_argument('-cif', action='store_true', help='Directory of charge files computed from ASCII')
    gmx_parser.add_argument('-c', help='Directory of charge files computed from ASCII')
    gmx_parser.add_argument('-a', help='Path to assignment (generated from polypal_ff) file if not in current directory)')

    args = parser.parse_args()

    if args.command == 'pdb':
        if args.h:
            run_polypal_pdb(help_flag=True)
        else:
            run_polypal_pdb(help_flag=False, mode_flag_xyz=args.xyz, mode_flag_gromacs=args.gromacs, xyz_filename=args.x, qforce_itp=args.q, pdb_filename=args.p)

    if args.command == 'ff':
        if args.h:
            run_polypal_ff(help_flag=True)
        else:
            run_polypal_ff(help_flag=False, itp_filename=args.q, ext_lj_file=args.lj, nonbonded_itp=args.n)

    if args.command == 'top':
        if args.h:
            run_polypal_top(help_flag=True)
        else:
            run_polypal_top(help_flag=False, pdb_filename=args.p, itp_filename=args.q, assignment_file=args.a)


    if args.command == 'gmx':
        if args.h:
            run_polypal_gmx(help_flag=True)
        else:
            run_polypal_gmx(help_flag=False, pdb_filename=args.p, qforce_itp=args.q, itp_filename=args.f, gro_filename=args.g, top_filename=args.t, mode_flag_txt=args.txt,mode_flag_pqr=args.pqr, mode_flag_mol2=args.mol2, mode_flag_cif=args.cif, charge_dir=args.c, assignment_file=args.a)

    if args.help:
        custom_help()

if __name__ == '__main__':
    main()
